#pragma once

#include <algorithm>
#include <cstdint>
#include <vector>

#include "rocksdb/rocksdb_namespace.h"

namespace ROCKSDB_NAMESPACE {

namespace heapkv {

struct OneSeq {
  uint8_t left;
  uint8_t right;
};

constexpr static inline OneSeq one_seq[9] = {
    {0, 0},
    {0b10000000, 0b00000001},
    {0b11000000, 0b00000011},
    {0b11100000, 0b00000111},
    {0b11110000, 0b00001111},
    {0b11111000, 0b00011111},
    {0b11111100, 0b00111111},
    {0b11111110, 0b01111111},
    {0b11111111, 0b11111111},
};

void SetBitMap(uint8_t *bm, uint32_t off, uint32_t n);
void UnSetBitMap(uint8_t *bm, uint32_t off, uint32_t n);

// worst fit allocator, ** only continuously >8 bits can be allocated **
class BitMapAllocator {
 private:
  // [start, end)
  struct Segment {
    uint16_t start{0};
    uint16_t end{0};
    Segment() = default;
    Segment(uint32_t s, uint32_t e) : start(s), end(e) {}
    uint32_t size() const { return end - start; }
    auto operator<(const Segment &other) const { return size() < other.size(); }
  };

 private:
  uint16_t size_{0};  // size in bytes, less than 4KiB
  Segment current_alloc_seg_{};
  uint32_t total_free_bits_{0};
  // we might need to access raw data in priority queue in the future, so we use
  // vector with heap operations
  std::vector<Segment> free_list_;
  uint8_t *bm_{nullptr};

 public:
  BitMapAllocator() = default;

  void Reset() {
    size_ = 0;
    current_alloc_seg_ = Segment{};
    total_free_bits_ = 0;
    free_list_.clear();
    bm_ = nullptr;
  }

  void Init(uint16_t size, uint8_t *bm, bool empty_hint = false);

  int32_t Alloc(uint32_t n);

  uint32_t TotalFreeBits() const { return total_free_bits_; }

  uint32_t MaxContiguousFreeBits() const {
    return std::max(current_alloc_seg_.size(),
                    free_list_.empty() ? 0 : free_list_.front().size());
  }

  static uint32_t CalcApproximateFreeBits(uint8_t *bm, uint32_t size);

 private:
  Segment PopHeap() {
    if (free_list_.empty()) {
      return {};
    }
    std::pop_heap(free_list_.begin(), free_list_.end());
    auto seg = free_list_.back();
    free_list_.pop_back();
    return seg;
  }

  void PushHeap(Segment seg) {
    free_list_.push_back(seg);
    std::push_heap(free_list_.begin(), free_list_.end());
  }
};

// struct BI {
//   uint16_t zero_count : 4;
//   uint16_t left_zero : 4;
//   uint16_t right_zero : 4;
//   uint16_t longest_zero_seq : 4;
// };

// const BI bit_info[256] = {
//     {8, 8, 8, 8}, {7, 7, 0, 7}, {7, 6, 1, 6}, {6, 6, 0, 6}, {7, 5, 2, 5},
//     {6, 5, 0, 5}, {6, 5, 1, 5}, {5, 5, 0, 5}, {7, 4, 3, 4}, {6, 4, 0, 4},
//     {6, 4, 1, 4}, {5, 4, 0, 4}, {6, 4, 2, 4}, {5, 4, 0, 4}, {5, 4, 1, 4},
//     {4, 4, 0, 4}, {7, 3, 4, 4}, {6, 3, 0, 3}, {6, 3, 1, 3}, {5, 3, 0, 3},
//     {6, 3, 2, 3}, {5, 3, 0, 3}, {5, 3, 1, 3}, {4, 3, 0, 3}, {6, 3, 3, 3},
//     {5, 3, 0, 3}, {5, 3, 1, 3}, {4, 3, 0, 3}, {5, 3, 2, 3}, {4, 3, 0, 3},
//     {4, 3, 1, 3}, {3, 3, 0, 3}, {7, 2, 5, 5}, {6, 2, 0, 4}, {6, 2, 1, 3},
//     {5, 2, 0, 3}, {6, 2, 2, 2}, {5, 2, 0, 2}, {5, 2, 1, 2}, {4, 2, 0, 2},
//     {6, 2, 3, 3}, {5, 2, 0, 2}, {5, 2, 1, 2}, {4, 2, 0, 2}, {5, 2, 2, 2},
//     {4, 2, 0, 2}, {4, 2, 1, 2}, {3, 2, 0, 2}, {6, 2, 4, 4}, {5, 2, 0, 3},
//     {5, 2, 1, 2}, {4, 2, 0, 2}, {5, 2, 2, 2}, {4, 2, 0, 2}, {4, 2, 1, 2},
//     {3, 2, 0, 2}, {5, 2, 3, 3}, {4, 2, 0, 2}, {4, 2, 1, 2}, {3, 2, 0, 2},
//     {4, 2, 2, 2}, {3, 2, 0, 2}, {3, 2, 1, 2}, {2, 2, 0, 2}, {7, 1, 6, 6},
//     {6, 1, 0, 5}, {6, 1, 1, 4}, {5, 1, 0, 4}, {6, 1, 2, 3}, {5, 1, 0, 3},
//     {5, 1, 1, 3}, {4, 1, 0, 3}, {6, 1, 3, 3}, {5, 1, 0, 2}, {5, 1, 1, 2},
//     {4, 1, 0, 2}, {5, 1, 2, 2}, {4, 1, 0, 2}, {4, 1, 1, 2}, {3, 1, 0, 2},
//     {6, 1, 4, 4}, {5, 1, 0, 3}, {5, 1, 1, 2}, {4, 1, 0, 2}, {5, 1, 2, 2},
//     {4, 1, 0, 1}, {4, 1, 1, 1}, {3, 1, 0, 1}, {5, 1, 3, 3}, {4, 1, 0, 2},
//     {4, 1, 1, 1}, {3, 1, 0, 1}, {4, 1, 2, 2}, {3, 1, 0, 1}, {3, 1, 1, 1},
//     {2, 1, 0, 1}, {6, 1, 5, 5}, {5, 1, 0, 4}, {5, 1, 1, 3}, {4, 1, 0, 3},
//     {5, 1, 2, 2}, {4, 1, 0, 2}, {4, 1, 1, 2}, {3, 1, 0, 2}, {5, 1, 3, 3},
//     {4, 1, 0, 2}, {4, 1, 1, 1}, {3, 1, 0, 1}, {4, 1, 2, 2}, {3, 1, 0, 1},
//     {3, 1, 1, 1}, {2, 1, 0, 1}, {5, 1, 4, 4}, {4, 1, 0, 3}, {4, 1, 1, 2},
//     {3, 1, 0, 2}, {4, 1, 2, 2}, {3, 1, 0, 1}, {3, 1, 1, 1}, {2, 1, 0, 1},
//     {4, 1, 3, 3}, {3, 1, 0, 2}, {3, 1, 1, 1}, {2, 1, 0, 1}, {3, 1, 2, 2},
//     {2, 1, 0, 1}, {2, 1, 1, 1}, {1, 1, 0, 1}, {7, 0, 7, 7}, {6, 0, 0, 6},
//     {6, 0, 1, 5}, {5, 0, 0, 5}, {6, 0, 2, 4}, {5, 0, 0, 4}, {5, 0, 1, 4},
//     {4, 0, 0, 4}, {6, 0, 3, 3}, {5, 0, 0, 3}, {5, 0, 1, 3}, {4, 0, 0, 3},
//     {5, 0, 2, 3}, {4, 0, 0, 3}, {4, 0, 1, 3}, {3, 0, 0, 3}, {6, 0, 4, 4},
//     {5, 0, 0, 3}, {5, 0, 1, 2}, {4, 0, 0, 2}, {5, 0, 2, 2}, {4, 0, 0, 2},
//     {4, 0, 1, 2}, {3, 0, 0, 2}, {5, 0, 3, 3}, {4, 0, 0, 2}, {4, 0, 1, 2},
//     {3, 0, 0, 2}, {4, 0, 2, 2}, {3, 0, 0, 2}, {3, 0, 1, 2}, {2, 0, 0, 2},
//     {6, 0, 5, 5}, {5, 0, 0, 4}, {5, 0, 1, 3}, {4, 0, 0, 3}, {5, 0, 2, 2},
//     {4, 0, 0, 2}, {4, 0, 1, 2}, {3, 0, 0, 2}, {5, 0, 3, 3}, {4, 0, 0, 2},
//     {4, 0, 1, 1}, {3, 0, 0, 1}, {4, 0, 2, 2}, {3, 0, 0, 1}, {3, 0, 1, 1},
//     {2, 0, 0, 1}, {5, 0, 4, 4}, {4, 0, 0, 3}, {4, 0, 1, 2}, {3, 0, 0, 2},
//     {4, 0, 2, 2}, {3, 0, 0, 1}, {3, 0, 1, 1}, {2, 0, 0, 1}, {4, 0, 3, 3},
//     {3, 0, 0, 2}, {3, 0, 1, 1}, {2, 0, 0, 1}, {3, 0, 2, 2}, {2, 0, 0, 1},
//     {2, 0, 1, 1}, {1, 0, 0, 1}, {6, 0, 6, 6}, {5, 0, 0, 5}, {5, 0, 1, 4},
//     {4, 0, 0, 4}, {5, 0, 2, 3}, {4, 0, 0, 3}, {4, 0, 1, 3}, {3, 0, 0, 3},
//     {5, 0, 3, 3}, {4, 0, 0, 2}, {4, 0, 1, 2}, {3, 0, 0, 2}, {4, 0, 2, 2},
//     {3, 0, 0, 2}, {3, 0, 1, 2}, {2, 0, 0, 2}, {5, 0, 4, 4}, {4, 0, 0, 3},
//     {4, 0, 1, 2}, {3, 0, 0, 2}, {4, 0, 2, 2}, {3, 0, 0, 1}, {3, 0, 1, 1},
//     {2, 0, 0, 1}, {4, 0, 3, 3}, {3, 0, 0, 2}, {3, 0, 1, 1}, {2, 0, 0, 1},
//     {3, 0, 2, 2}, {2, 0, 0, 1}, {2, 0, 1, 1}, {1, 0, 0, 1}, {5, 0, 5, 5},
//     {4, 0, 0, 4}, {4, 0, 1, 3}, {3, 0, 0, 3}, {4, 0, 2, 2}, {3, 0, 0, 2},
//     {3, 0, 1, 2}, {2, 0, 0, 2}, {4, 0, 3, 3}, {3, 0, 0, 2}, {3, 0, 1, 1},
//     {2, 0, 0, 1}, {3, 0, 2, 2}, {2, 0, 0, 1}, {2, 0, 1, 1}, {1, 0, 0, 1},
//     {4, 0, 4, 4}, {3, 0, 0, 3}, {3, 0, 1, 2}, {2, 0, 0, 2}, {3, 0, 2, 2},
//     {2, 0, 0, 1}, {2, 0, 1, 1}, {1, 0, 0, 1}, {3, 0, 3, 3}, {2, 0, 0, 2},
//     {2, 0, 1, 1}, {1, 0, 0, 1}, {2, 0, 2, 2}, {1, 0, 0, 1}, {1, 0, 1, 1},
//     {0, 0, 0, 0},
// };

}  // namespace heapkv
}  // namespace ROCKSDB_NAMESPACE